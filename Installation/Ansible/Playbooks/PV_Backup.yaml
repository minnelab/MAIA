---
- name: Create PV report
  hosts: all
  become: yes
  vars:
    compress: false
    log_dir: "./logs"
    exclude_dirs: [".conda/*", ".cache/*", ".local/*"]
  tasks:
    - name: Get current used storage for each namespaced local hostPath PV
      shell: |
        NAMESPACE={{ namespace }}
        for d in /opt/local-path-provisioner/*; do
          [ -d "$d" ] || continue
          dir=$(basename "$d")
          # Match pattern: <PV_ID>_<NAMESPACE>_<PVC_NAME>
          if [[ "$dir" =~ ^([^_]+)_([^_]+)_(.+)$ ]]; then
            pv_ns="${BASH_REMATCH[2]}"
            if [[ "$pv_ns" == "$NAMESPACE" ]]; then
              du -sh "$d"
            fi
          fi
        done
      args:
        executable: /bin/bash
      register: pv_report

    - name: Build exclude_dirs_string for tar
      set_fact:
        exclude_dirs_string: >-
          {{ exclude_dirs | map('regex_replace', '^(.*)$', '--exclude=\1') | join(' ') }}

    - name: Create a backup if the size of the PV is smaller than the threshold
      shell: |
        THRESHOLD={{ threshold }}
        NAMESPACE={{ namespace }}
        OUTPUT=""
        exclude_dirs_string="{{ exclude_dirs_string }}"
        for d in /opt/local-path-provisioner/*; do
          [ -d "$d" ] || continue
          dir=$(basename "$d")
          # Match pattern: <PV_ID>_<NAMESPACE>_<PVC_NAME>
          if [[ "$dir" =~ ^([^_]+)_([^_]+)_(.+)$ ]]; then
            pv_ns="${BASH_REMATCH[2]}"
            if [[ "$pv_ns" == "$NAMESPACE" ]]; then
              size=$(du -sh $exclude_dirs_string "$d"  | awk '{print $1}')
              OUTPUT+="\n--------------------------------\n"
              OUTPUT+="du -sh $exclude_dirs_string "$d"\n"
              OUTPUT+="Size of $dir is $size\n"
              if [ $(numfmt --from=iec $size) -lt $(numfmt --from=iec $THRESHOLD) ]; then
                OUTPUT+="Creating backup for PV $dir\n"
                if [ -f "/nfs/${pv_ns}/${dir}.tar.gz" ] || [ -f "/nfs/${pv_ns}.tar.gz" ]; then
                  OUTPUT+="Backup for PV $dir already exists, skipping\n"
                else
                  OUTPUT+="Creating backup for PV $dir\n"
                  mkdir -p "/nfs/${pv_ns}"
                  tar -czvf "/nfs/${pv_ns}/${dir}.tar.gz" $exclude_dirs_string "$d" 
                  OUTPUT+="Backup for PV $dir created successfully\n"
                fi
              else
                OUTPUT+="WARNING: Size of $dir is greater than $THRESHOLD, skipping backup\n"
                while IFS=$'\t' read -r subsize subpath; do
                  if [ "$(numfmt --from=iec $subsize)" -gt "$(numfmt --from=iec $THRESHOLD)" ]; then
                    OUTPUT+="$subsize\t$subpath\n"
                  fi
                done < <(du -h -d 1 $exclude_dirs_string "$d")
              fi
            fi
          fi
        done
        # Print OUTPUT so Ansible can register and display it
        echo -e "$OUTPUT"
      args:
        executable: /bin/bash
      register: pv_backup_output
    - name: Ensure backup log directory exists
      delegate_to: localhost
      become: false
      file:
        path: "{{ log_dir }}/{{ namespace }}"
        state: directory
        mode: '0755'
    - name: Write PV backup creation status to local file on localhost (no privilege escalation)
      delegate_to: localhost
      become: false
      copy:
        content: "{{ pv_backup_output.stdout }}"
        # Ensure the destination directory exists before writing the file
    
        dest: "{{ log_dir }}/{{ namespace }}/local_hostpath_backup_status_{{ inventory_hostname }}_{{ namespace }}.txt"
        mode: '0644'
    
    - name: Get current used storage for each namespaced NFS PV (run only on first host)
      shell: |
        NAMESPACE={{ namespace }}
        for d in /nfs/${NAMESPACE}-*; do
          [ -d "$d" ] || continue
          dir=$(basename "$d")
          du -sh "$d"
        done
      args:
        executable: /bin/bash
      register: nfs_report
      delegate_to: "{{ groups['all'][0] }}"
      run_once: true
    
    
    - name: Create a backup if the size of the NFS PV is smaller than the threshold
      shell: |
          # Check each NFS PV in the namespace and report backup status
          THRESHOLD={{ nfs_threshold }}
          NAMESPACE={{ namespace }}
          OUTPUT=""
          exclude_dirs_string="{{ exclude_dirs_string }}"
          for d in /nfs/${NAMESPACE}-*; do
            [ -d "$d" ] || continue
            dir=$(basename "$d")
            # Match pattern: <NAMESPACE>-
            if [[ "$dir" == ${NAMESPACE}-* ]]; then
                size=$(du -sh $exclude_dirs_string "$d" | awk '{print $1}')
                OUTPUT+="\n--------------------------------\n"
                OUTPUT+="Size of $dir is $size\n"
                if [ $(numfmt --from=iec $size) -lt $(numfmt --from=iec $THRESHOLD) ]; then
                  if [ -f "/nfs/${NAMESPACE}/nfs/${dir}.tar.gz" ] || [ -f "/nfs/${NAMESPACE}.tar.gz" ]; then
                    OUTPUT+="Backup for PV $dir already exists, skipping\n"
                  else
                    OUTPUT+="Backup for PV $dir does not exist\n"
                    mkdir -p "/nfs/${NAMESPACE}/nfs"
                    tar -czvf "/nfs/${NAMESPACE}/nfs/${dir}.tar.gz" $exclude_dirs_string "$d"
                    OUTPUT+="Backup for PV $dir created successfully\n"
                  fi
                else
                  OUTPUT+="WARNING: Size of $dir is greater than $THRESHOLD, skipping backup\n"
                  while IFS=$'\t' read -r subsize subpath; do
                    if [ "$(numfmt --from=iec $subsize)" -gt "$(numfmt --from=iec $THRESHOLD)" ]; then
                      OUTPUT+="$subsize\t$subpath\n"
                    fi
                  done < <(du -h -d 1 "$d")
                fi
            fi
          done
          # Print OUTPUT so Ansible can register and display it
          echo -e "$OUTPUT"
      args:
        executable: /bin/bash
      register: nfs_backup_output
    - name: Write PV backup creation status to local file on localhost (no privilege escalation)
      delegate_to: localhost
      become: false
      copy:
        content: "{{ nfs_backup_output.stdout }}"
        dest: "{{ log_dir }}/{{ namespace }}/nfs_backup_status_{{ namespace }}.txt"
        mode: '0644'
    
    - name: Compress the Namespace Backup
      shell: |
        NAMESPACE={{ namespace }}
        COMPRESS={{ compress }}
        if [ "${COMPRESS}" = "true" ]; then
          if [ -f "/nfs/${NAMESPACE}.tar.gz" ]; then
            echo "Compressed backup /nfs/${NAMESPACE}.tar.gz already exists, skipping"
          else
            tar -czvf "/nfs/${NAMESPACE}.tar.gz" "/nfs/${NAMESPACE}"
            echo "NFS backup compressed successfully"
            rm -rf "/nfs/${NAMESPACE}"
          fi
        else
          echo "Compress env variable not set to 'true', skipping compression"
        fi
      args:
        executable: /bin/bash
      register: nfs_backup_compression
    
    - name: Ensure cifs-utils is installed
      package:
        name: cifs-utils
        state: present
      delegate_to: "{{ groups['all'][0] }}"
      run_once: true

    - name: Mount CIFS share
      ansible.posix.mount:
        path: /mnt/cifs                # Mount point
        src: "//{{ cifs_server }}/{{ cifs_share }}"  # CIFS share
        fstype: cifs
        opts: "username={{ cifs_user }},password={{ cifs_pass }},iocharset=utf8,rw,file_mode=0777,dir_mode=0777"
        state: mounted
      delegate_to: "{{ groups['all'][0] }}"
      run_once: true